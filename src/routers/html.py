from fastapi import APIRouter, Request
from fastapi.responses import FileResponse, HTMLResponse

from dependencies import APPLICATION_PATH
from init import CONFIG, DB
from models.ajax import Ajax
from templates.index import Index
from templates.usage_point import UsagePoint

ROUTER = APIRouter(tags=["HTML"], include_in_schema=False)


@ROUTER.get("/favicon.ico")
async def favicon():
    """
    This function handles the endpoint '/favicon.ico' and returns the favicon.ico file as a response.

    Returns:
    - FileResponse: The favicon.ico file as a response.
    """
    return FileResponse(f"{APPLICATION_PATH}/static/favicon.ico")


@ROUTER.get("/", response_class=HTMLResponse)
def main():
    """This function handles the root endpoint '/' and returns the HTML response generated by the 'display' method of the 'Index' class.

    Returns:
    - HTMLResponse: The HTML response generated by the 'display' method of the 'Index' class.
    """
    return Index(CONFIG, DB).display()


@ROUTER.get("/usage_point_id/{usage_point_id}", response_class=HTMLResponse)
@ROUTER.get("/usage_point_id/{usage_point_id}/", response_class=HTMLResponse)
def usage_point_id(usage_point_id):
    """This function handles the endpoint '/usage_point_id/{usage_point_id}' and '/usage_point_id/{usage_point_id}/' and returns the HTML response generated by the 'display' method of the 'UsagePoint' class.

    Parameters:
    - usage_point_id (str): The ID of the usage point.

    Returns:
    - HTMLResponse: The HTML response generated by the 'display' method of the 'UsagePoint' class.
    """
    return UsagePoint(usage_point_id).display()


@ROUTER.get("/datatable/{usage_point_id}/{measurement_direction}")
@ROUTER.get("/datatable/{usage_point_id}/{measurement_direction}/")
def datatable(request: Request, usage_point_id, measurement_direction):
    """Get datatable for a specific usage point and measurement direction.

    Parameters:
    - request (Request): The FastAPI request object.
    - usage_point_id (str): The ID of the usage point.
    - measurement_direction (str): The measurement direction (e.g., consumption, production).

    Returns:
    - The datatable for the specified usage point and measurement direction.

    Example:
        datatable(request, "usage_point_id", "measurement_direction")
    """
    return Ajax(usage_point_id).datatable(measurement_direction, request)


# ########################################################################################################################
# # SWAGGER
# @ROUTER.get(f"/swagger", response_class=HTMLResponse, include_in_schema=False)
# def swagger():
#     data = '<object style="background-color: #FFFFFF; width: 100%; height: 100%" data="/docs"/>'
#     html_content = html_return_fullscreen(body=data, footer_type="consent")
#     return html_content
#
#
# ########################################################################################################################
# # REDOC
# @ROUTER.get(f"/redocs", response_class=HTMLResponse, include_in_schema=False)
# def swagger():
#     data = '<object style="background-color: #FFFFFF; width: 100%; height: 100%" data="/redoc"/>'
#     html_content = html_return_fullscreen(body=data, footer_type="consent")
#     return html_content
#
# from jinja2 import Template
# def html_return_fullscreen(body, footer_type="donation"):
#     with open(f'/app/templates/html/index.html') as file_:
#         index_template = Template(file_.read())
#     html = index_template.render(
#         body=body,
#         )
#     return html
